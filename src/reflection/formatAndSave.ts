import * as fs from "fs";
import * as prettier from "prettier";

import { ClassData, InterfaceData } from "@app/reflection/dataInterfaces";

export const formatAndSave = async (
  baseDir: string,
  outFile: string,
  classes: ClassData[],
  interfaces: InterfaceData[]
): Promise<void> => {
  const jsonsClasses = classes.map((c) => {
    const path = c.fqcn.replace(new RegExp("/" + c.name + "$"), "");
    const importStr = `new Promise((r) => void import("./${path}").then((imp) => r(imp.${c.name})))`;
    return `{
      fqcn: "${c.fqcn}",
      name: "${c.name}",
      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
      ctor: ${c.constructorVisibility === "public" ? importStr : "null"},
      implementsInterfaces: ${JSON.stringify(c.implementsInterfaces)},
      extendsClass: ${c.extendsClass ? `"${c.extendsClass}"` : "null"},
      constructorVisibility: "${c.constructorVisibility}",
      constructorParameters: ${JSON.stringify(c.constructorParameters)},
      isAbstract: ${c.isAbstract ? "true" : "false"},
      properties: ${JSON.stringify(c.properties)},
      methods: ${JSON.stringify(c.methods)},
    }`;
  });
  const jsonClasses = `[${jsonsClasses.join(",")}]`;

  const jsonsInterfaces = interfaces.map((c) => {
    return `{
      fqin: "${c.fqin}",
      name: "${c.name}",
      extendsInterface: ${
        c.extendsInterface ? `"${c.extendsInterface}"` : "null"
      },
      properties: ${JSON.stringify(c.properties)},
      methods: ${JSON.stringify(c.methods)},
    }`;
  });
  const jsonInterfaces = `[${jsonsInterfaces.join(",")}]`;

  const dataType = `
    export interface ParameterData {
      name: string;
      type: string;
    }

    export interface PropertyData {
      name: string;
      type: string;
      visibility: "public" | "protected" | "private";
    }

    export interface MethodData {
      name: string;
      parameters: ParameterData[];
      returnType: string;
      visibility: "public" | "protected" | "private";
    }

    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    type Constructor = new (...args: any[]) => any;
    export interface ClassData {
      fqcn: string;
      name: string;
      ctor: Promise<Constructor> | null;
      implementsInterfaces: string[];
      extendsClass: string | null;
      constructorParameters: ParameterData[];
      constructorVisibility: "public" | "protected" | "private";
      isAbstract: boolean;
      properties: PropertyData[];
      methods: MethodData[];
    }

    export interface InterfaceData {
      fqin: string;
      name: string;
      properties: PropertyData[];
      extendsInterface: string | null;
      methods: MethodData[];
    }

`;

  const warning =
    "// This file was autogenerated by aero-di. It is recommended to not change it";

  const contents = `${warning}\n${dataType}\n export const classesReflection: ClassData[] = ${jsonClasses};
  \n export const interfacesReflection: InterfaceData[] = ${jsonInterfaces};`;

  const outPath = `${baseDir}/${outFile}`;
  // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-member-access
  const prettierConfigOptions = await prettier.resolveConfig(outPath);

  if (prettierConfigOptions) {
    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
    prettierConfigOptions.parser = "typescript";
  }
  // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-assignment
  const formatted = prettier.format(
    contents,
    prettierConfigOptions ?? {
      parser: "typescript",
    }
  );

  fs.writeFileSync(outPath, formatted);
};
